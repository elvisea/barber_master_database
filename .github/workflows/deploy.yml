name: Deploy Database

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'         # Aciona a pipeline se houver alterações no docker-compose.yml
      - '.github/workflows/deploy.yml'  # Aciona a pipeline se houver alterações no arquivo de deploy.yml
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'         # Aciona a pipeline para alterações no docker-compose.yml
      - '.github/workflows/deploy.yml'  # Aciona a pipeline para alterações no arquivo de deploy.yml

env:
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?schema=public

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Passo removido: instalação do Docker e Docker Compose no runner do GitHub

      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Transfer Docker Compose to Server
        run: |
          scp -v -i ~/.ssh/deploy_key -P ${{ secrets.REMOTE_PORT }} \
            docker-compose.yml \
            ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.REMOTE_TARGET }}

      - name: Deploy Database using Docker Compose
        run: |
          ssh -i ~/.ssh/deploy_key -p ${{ secrets.REMOTE_PORT }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "\
            cd ${{ secrets.REMOTE_TARGET }} && \
            echo \"POSTGRES_USER=${{ secrets.POSTGRES_USER }}\" > .env && \
            echo \"POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}\" >> .env && \
            echo \"POSTGRES_DB=${{ secrets.POSTGRES_DB }}\" >> .env && \
            echo \"POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}\" >> .env && \
            echo \"POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}\" >> .env && \
            echo \"DATABASE_URL=${{ env.DATABASE_URL }}\" >> .env && \
            docker-compose -f docker-compose.yml up -d postgres && \
            echo 'Database deployed successfully'"

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key
